<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小咸鱼的记事本</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-03-25T08:45:48.085Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Liu Jilin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>点击UISearchBar搜索的数据UIAlertController无响应</title>
    <link href="http://example.com/2021/03/25/%E7%82%B9%E5%87%BBUISearchBar%E6%90%9C%E7%B4%A2%E7%9A%84%E6%95%B0%E6%8D%AEUIAlertController%E6%97%A0%E5%93%8D%E5%BA%94/"/>
    <id>http://example.com/2021/03/25/%E7%82%B9%E5%87%BBUISearchBar%E6%90%9C%E7%B4%A2%E7%9A%84%E6%95%B0%E6%8D%AEUIAlertController%E6%97%A0%E5%93%8D%E5%BA%94/</id>
    <published>2021-03-25T08:30:38.000Z</published>
    <updated>2021-03-25T08:45:48.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="报错警告"><a href="#报错警告" class="headerlink" title="报错警告"></a>报错警告</h1><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误警告内容</span></span><br><span class="line">Attempt to present &lt;<span class="built_in">UIAlertController</span>: <span class="number">0x6003305b7b70</span>&gt; on &lt;Fragment2ViewController: <span class="number">0x600038e9db70</span>&gt; (from &lt;Fragment2ViewController: <span class="number">0x600038e9db70</span>&gt;) which is already presenting &lt;<span class="built_in">UISearchController</span>: <span class="number">0x60003ce41b60</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="出现情况"><a href="#出现情况" class="headerlink" title="出现情况"></a>出现情况</h1><p><code>UISearchController</code>关联了<code>UITableView</code>，其中<code>tableview</code>点击之后会跳出一个<code>alertview</code>。使用<code>searchbar</code>搜索之前，点击<code>cell</code>的<code>alertview</code>可以正常跳出并显示。然而，在用<code>searchbar</code>搜索过滤之后，点击<code>cell</code>之后无响应，并且产生错误警告。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>在自定义弹窗<code>presentViewController</code>之前加上</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span> dismissViewControllerAnimated:<span class="literal">YES</span> completion:<span class="literal">nil</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;报错警告&quot;&gt;&lt;a href=&quot;#报错警告&quot; class=&quot;headerlink&quot; title=&quot;报错警告&quot;&gt;&lt;/a&gt;报错警告&lt;/h1&gt;&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>内存（字节）对齐</title>
    <link href="http://example.com/2021/03/25/%E5%86%85%E5%AD%98%EF%BC%88%E5%AD%97%E8%8A%82%EF%BC%89%E5%AF%B9%E9%BD%90/"/>
    <id>http://example.com/2021/03/25/%E5%86%85%E5%AD%98%EF%BC%88%E5%AD%97%E8%8A%82%EF%BC%89%E5%AF%B9%E9%BD%90/</id>
    <published>2021-03-25T06:52:16.000Z</published>
    <updated>2021-03-25T08:28:22.732Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>占坑待写…</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;占坑待写…&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
      
    
    
    
    
    <category term="计算机基础" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>大小端</title>
    <link href="http://example.com/2021/03/25/%E5%A4%A7%E5%B0%8F%E7%AB%AF/"/>
    <id>http://example.com/2021/03/25/%E5%A4%A7%E5%B0%8F%E7%AB%AF/</id>
    <published>2021-03-25T01:45:30.000Z</published>
    <updated>2021-03-25T02:41:54.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>计算机系统内部是以字节进行存储，每个地址单元都是1字节（8bit），而不同的存储类型也有着不同的存储需求，同时32位系统和64位系统的存储需求也不尽相同。</p><table><thead><tr><th align="center">C类型</th><th align="center">32位</th><th align="center">64位</th><th align="center"></th><th align="center">C类型</th><th align="center">32位</th><th align="center">64位</th></tr></thead><tbody><tr><td align="center">BOOL</td><td align="center">1</td><td align="center">1</td><td align="center"></td><td align="center">short int</td><td align="center">2</td><td align="center">2</td></tr><tr><td align="center">int</td><td align="center">4</td><td align="center">4</td><td align="center"></td><td align="center">long</td><td align="center">4</td><td align="center">8</td></tr><tr><td align="center">double</td><td align="center">8</td><td align="center">8</td><td align="center"></td><td align="center">float</td><td align="center">4</td><td align="center">4</td></tr><tr><td align="center">char*</td><td align="center">4</td><td align="center">8</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>因此就存在一个，多个内存字节数据在内存中如何摆放的问题，不同的摆放顺序就导致了大端模式和小端模式的存在。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>假设一个4字节数据为<code>0x12 34 56 78</code>，其中<code>0x12</code>为高字节，<code>0x78</code>为低字节，将其存放在<code>0x4000 0000</code>的地址中，两种模式的区别为：</p><table><thead><tr><th></th><th align="center"><code>0x4000 0000</code></th><th align="center"><code>0x4000 0001</code></th><th align="center"><code>0x4000 0002</code></th><th align="center"><code>0x4000 0003</code></th></tr></thead><tbody><tr><td>大端模式</td><td align="center"><code>0x12</code></td><td align="center"><code>0x34</code></td><td align="center"><code>0x56</code></td><td align="center"><code>0x78</code></td></tr><tr><td>小端模式</td><td align="center"><code>0x78</code></td><td align="center"><code>0x56</code></td><td align="center"><code>0x34</code></td><td align="center"><code>0x12</code></td></tr></tbody></table><h2 id="大端模式"><a href="#大端模式" class="headerlink" title="大端模式"></a>大端模式</h2><p><font color="red">高</font>字节存放在<font color="red">低</font>地址中，<font color="red">低</font>字节存放在<font color="red">高</font>地址中</p><h2 id="小端模式"><a href="#小端模式" class="headerlink" title="小端模式"></a>小端模式</h2><p><font color="red">高</font>字节存放在<font color="red">高</font>地址中，<font color="red">低</font>字节存放在<font color="red">低</font>地址中</p><h2 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h2><p>不同的硬件厂商对于大小端模式有着不同的标准</p><ul><li>Intel的80×86系列芯片使用小端存储模式</li><li>ARM芯片默认采用小端，但可以切换为大端</li><li>MIPS芯片采用大端，但可以在大小端之间切换</li><li>在网络上传输的数据普遍采用的都是大端</li></ul><h1 id="大小端判断"><a href="#大小端判断" class="headerlink" title="大小端判断"></a>大小端判断</h1><p>通过将多字节数据拆分成单字节，然后判断存储的起始位置是高字节数据还是低字节数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="keyword">char</span> cLowAddressValue = *(<span class="keyword">char</span>*)&amp;num;</span><br><span class="line">    <span class="keyword">if</span> (cLowAddressValue == <span class="number">0x12</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;大端\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;小端\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;计算机系统内部是以字节进行存储，每个地址单元都是1字节（8bit），而不同的存储类型也有着不同的存储需求，同时32位系统和64位系统的存储需</summary>
      
    
    
    
    
    <category term="计算机基础" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C:ProtocolBuffers使用</title>
    <link href="http://example.com/2021/03/24/Objective-C-ProtocolBuffers%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2021/03/24/Objective-C-ProtocolBuffers%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-24T08:58:31.000Z</published>
    <updated>2021-03-26T01:33:33.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ProtocolBuffers简介"><a href="#ProtocolBuffers简介" class="headerlink" title="ProtocolBuffers简介"></a>ProtocolBuffers简介</h1><p><strong><em>Protocolbuffer</em></strong>（下文简称PB）是由Google推出的一种数据交换格式，它独立于语言，独立于平台。用于分布式应用之间的数据通信或者异构环境下的数据交换。与传统的XML和JSON不同的是，它是一种二进制格式，转换效率非常快，由于它的跨平台、跨编程语言的特点，让它越来越普及，尤其是网络数据交换方面日趋成为一种主流。</p><p>Google 一开始提供了三种语言的实现：java、c++ 和 python，每一种实现都包含了相应语言的编译器以及库文件。当前PB的最新版本已经支持obj-c，c#，js，Ruby等语言。</p><h1 id="下载并安装代码生成器Protoc"><a href="#下载并安装代码生成器Protoc" class="headerlink" title="下载并安装代码生成器Protoc"></a>下载并安装代码生成器Protoc</h1><p><font face="华文中宋" ><font color="#006600">iOS开发不要使用brew直接下载PB，brew下载的版本是旧版本，不支持obj-c</font></font><br/></p><p>最新版本的PB已经更新到<a href="https://github.com/protocolbuffers/protobuf/releases">ProtocolBuffers v3.15.6</a>，打开并下载OSX的最新版本。</p><p>下载完成之后，将可执行文件拖入到<code>/usr/local/bin/</code>目录下即可使用。</p><h1 id="使用protoc将-proto文件生成所需代码"><a href="#使用protoc将-proto文件生成所需代码" class="headerlink" title="使用protoc将.proto文件生成所需代码"></a>使用protoc将.proto文件生成所需代码</h1><ol><li>打开终端工具，打开.proto文件所在目录</li><li>输入命令<code>protoc XXX.proto --objc_out=&quot;./&quot;</code></li><li>执行完成之后，对应目录下面就会生成两个obj-c类文件：<code>xxx.pbobjc.h</code>和<code>xxx.phobjc.m</code></li><li>由于生成的代码文件是MRC，我们得手动在Xcode中手动配置ARC模式</li><li>在<code>TARGETS-&gt;XXX(项目名)-&gt;Build Phases-&gt;Compile Sources</code>中找到刚才生成的.m文件，将其<code>Compiler Flags</code>设置成<code>-fno-objc-arc</code></li></ol><h1 id="使用Cocopods导入PB"><a href="#使用Cocopods导入PB" class="headerlink" title="使用Cocopods导入PB"></a>使用Cocopods导入PB</h1><p>首先用命令行工具cd到你工程文件所在目录，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure><p>你的目录下面就会自动生成一个<code>Podfile</code>文件</p><p>接着在命令行工具输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search protobuf</span><br></pre></td></tr></table></figure><p>就会出现PB的若干版本，映入眼帘的第一个版本便是我们所需要的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-&gt; Protobuf (4.0.0-rc1)</span><br><span class="line">   Protocol Buffers v.3 runtime library <span class="keyword">for</span> Objective-C.</span><br><span class="line">   pod <span class="string">&#x27;Protobuf&#x27;</span>, <span class="string">&#x27;~&gt; 4.0.0-rc1&#x27;</span></span><br><span class="line">   - Homepage: https://github.com/protocolbuffers/protobuf</span><br><span class="line">   - Source:   https://github.com/protocolbuffers/protobuf.git</span><br><span class="line">   - Versions: 4.0.0-rc1, 3.14.0, 3.13.0, 3.13.0-rc3, 3.12.0, 3.11.4, 3.11.3,</span><br><span class="line">   3.11.2, 3.11.1, 3.11.0, 3.11.0-rc2, 3.10.0, 3.10.0-rc1, 3.9.2, 3.9.0,</span><br><span class="line">   3.9.0-rc1, 3.8.0, 3.8.0-rc1, 3.7.0, 3.7.0-rc.3, 3.7.0-rc.2, 3.6.1, 3.6.0,</span><br><span class="line">   3.5.0, 3.4.0, 3.3.0, 3.2.1, 3.2.0, 3.2.0rc2, 3.2.0-rc.1, 3.1.0, 3.0.2, 3.0.0,</span><br><span class="line">   3.0.0-beta-4, 3.0.0-beta-3.1, 3.0.0-beta-3, 3.0.0-beta-2, 3.0.0-alpha-4.1,</span><br><span class="line">   3.0.0-alpha-3 [master repo]</span><br></pre></td></tr></table></figure><p>我们将</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">&#x27;Protobuf&#x27;</span>, <span class="string">&#x27;~&gt; 4.0.0-rc1&#x27;</span></span><br></pre></td></tr></table></figure><p>复制粘贴到我们的<code>Podfile</code>文件中，然后在工程目录下输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>这样我们就可以使用PB了，其他第三方库的安装大同小异。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ProtocolBuffers简介&quot;&gt;&lt;a href=&quot;#ProtocolBuffers简介&quot; class=&quot;headerlink&quot; title=&quot;ProtocolBuffers简介&quot;&gt;&lt;/a&gt;ProtocolBuffers简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&lt;e</summary>
      
    
    
    
    
    <category term="iOS开发" scheme="http://example.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/12/23/hello-world/"/>
    <id>http://example.com/2020/12/23/hello-world/</id>
    <published>2020-12-23T02:11:24.402Z</published>
    <updated>2021-03-25T01:48:24.643Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
